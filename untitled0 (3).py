# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FqM2xsvJqv1bk_HW2HLTtsd-MBeDST6Q

#  **Name: Jitendra Nath Chandra**
 Registration No: OIB/L2/IP11376

*Oasis Infobyte Internship 2023*

# Task no: 3  CAR PRICE PREDICTION WITH MACHINE LEARNING

**About:** *The price of a car depends on a lot of factors like the goodwill of the brand of the car,features of the car, horsepower and the mileage it gives and many more. Car price prediction is one of the major research areas in machine learning. So if you want to learn how to train a car price prediction model then this project is for you.*
"""

import pandas as pd

# loading the data from csv file to pandas dataframe
#Load Data and csv means comma separated values, pd converts text to csv ( separated with comma)

data = pd.read_csv('car data.csv')

"""## 1. Display Top 5 Rows of The Dataset"""

# inspecting the first n rows of the dataframe
#head() means 1st 5 rows of the dataframe
data.head()

"""## 2. Check Last 5 Rows of The Dataset"""

data.tail()

"""## 3. Find Shape of Our Dataset (Number of Rows And Number of Columns)"""

data.shape

"""In this dataframe there are 301 rows and 9 columns"""

print("Number of Rows",data.shape[0])
print("Number of Columns",data.shape[1])

"""# 4. Get Information About Our Dataset Like the Total Number of Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement"""

data.info

"""## 5. Check Null Values In The Dataset"""

data.isnull().sum()

"""## 6. Get Overall Statistics About The Dataset"""

data.describe

#Describe method: Statistic of our Data ( like- Count, Mean, Std, Min, Max)
data.describe()

"""## 7. Data Processiong"""

data.head(1)

import datetime

datetime.datetime.now()

date_time = datetime.datetime.now()
print(date_time)

date_time.year

# current year - this year( columns year)
data['Age']=date_time.year - data['Year']

data.head()

#Lets remove the year column
data.drop('Year', axis=1, inplace=True)

data.head()

"""## Outlier Removal"""

import seaborn as sns

sns.boxplot(data['Selling_Price'])

data['Selling_Price']

sorted(data['Selling_Price'],reverse=True)

(data['Selling_Price']>=33.0) & (data["Selling_Price"]<=35.0)

data[(data['Selling_Price']>=33.0) & (data['Selling_Price']<=35.0)]

#remove the remaining two data
data = data[~(data['Selling_Price']>=33.0) & (data['Selling_Price']<=35.0)]

data.shape

"""## Encoding the Categorical Columns"""

data.head(1)

data['Fuel_Type']

data['Fuel_Type'].unique()

data['Fuel_Type'] = data['Fuel_Type'].map({'Petrol':0, 'Diesel':1,'CNG':2})

data['Fuel_Type'].unique()

data['Seller_Type']

data['Seller_Type'].unique()

data['Seller_Type'] = data['Seller_Type'].map({'Dealer':0,'Individual':1})

data['Seller_Type'].unique()

data['Transmission'].unique()

data['Transmission'] =data['Transmission'].map({'Manual':0,'Automatic':1})

data['Transmission'].unique()

data.head()

"""## 8. Store Feature Matrix In X and Response(Target) In Vector y"""

X = data.drop(['Car_Name','Selling_Price'],axis=1)
y = data['Selling_Price']

X

#target
y

"""## 9. Splitting The Dataset Into The Training Set And Test Set"""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=42)

"""## 10. Import The models"""

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from xgboost import XGBRegressor

"""## 11. Model Training"""

rf = RandomForestRegressor()
rf.fit(X_train,y_train)

xgb = GradientBoostingRegressor()
xgb.fit(X_train,y_train)

xg = XGBRegressor()
xg.fit(X_train,y_train)

lr = LinearRegression()
lr.fit(X_train,y_train)

"""## 12. Prediction on Test Data"""

y_pred1 = lr.predict(X_test)
y_pred2 = rf.predict(X_test)
y_pred3 = xgb.predict(X_test)
y_pred4 = xg.predict(X_test)

"""## 13. Evaluating the Algorithm"""

from sklearn import metrics

score1 = metrics.r2_score(y_test,y_pred1)
score2 = metrics.r2_score(y_test,y_pred2)
score3 = metrics.r2_score(y_test,y_pred3)
score4 = metrics.r2_score(y_test,y_pred4)

print(score1,score2,score3,score4)

final_data = pd.DataFrame({'Models':['LR','RF','GBR','XG'],
             "R2_SCORE":[score1,score2,score3,score4]})

final_data



"""## 14. Save The Model"""

xg = XGBRegressor()
xg_final = xg.fit(X,y)

import joblib
joblib.dump(xg_final,'car_price_predictor')

model = joblib.load('car_price_predictor')

"""## 15. Prediction on New Data"""

import pandas as pd
data_new = pd.DataFrame({
    'Present_Price':5.59,
    'Kms_Driven':27000,
    'Fuel_Type':0,
    'Seller_Type':0,
    'Transmission':0,
    'Owner':0,
    'Age':8
},index=[0])

"""## GUI"""

from tkinter import *
import joblib

def show_entry_fields():
    p1=float(e1.get())
    p2=float(e2.get())
    p3=float(e3.get())
    p4=float(e4.get())
    p5=float(e5.get())
    p6=float(e6.get())
    p7=float(e7.get())

    model = joblib.load('car_price_predictor')
    data_new = pd.DataFrame({
    'Present_Price':p1,
    'Kms_Driven':p2,
    'Fuel_Type':p3,
    'Seller_Type':p4,
    'Transmission':p5,
    'Owner':p6,
    'Age':p7
},index=[0])
    result=model.predict(data_new)
    Label(master, text="Car Purchase amount").grid(row=8)
    Label(master, text=result).grid(row=10)
    print("Car Purchase amount", result[0])

master = Tk()
master.title("Car Price Prediction Using Machine Learning")
label = Label(master, text = "Car Price Prediction Using Machine Learning"
                          , bg = "black", fg = "white"). \
                               grid(row=0,columnspan=2)


Label(master, text="Present_Price").grid(row=1)
Label(master, text="Kms_Driven").grid(row=2)
Label(master, text="Fuel_Type").grid(row=3)
Label(master, text="Seller_Type").grid(row=4)
Label(master, text="Transmission").grid(row=5)
Label(master, text="Owner").grid(row=6)
Label(master, text="Age").grid(row=7)


e1 = Entry(master)
e2 = Entry(master)
e3 = Entry(master)
e4 = Entry(master)
e5 = Entry(master)
e6 = Entry(master)
e7 = Entry(master)


e1.grid(row=1, column=1)
e2.grid(row=2, column=1)
e3.grid(row=3, column=1)
e4.grid(row=4, column=1)
e5.grid(row=5, column=1)
e6.grid(row=6, column=1)
e7.grid(row=7, column=1)


Button(master, text='Predict', command=show_entry_fields).grid()

mainloop()

